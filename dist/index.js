import{sha256 as e}from"js-sha256";function t(t={},s){if(null==t)return"";const a=function e(t){let s=[];return Object.entries(t).map((([t,a],r)=>{if("object"==typeof a&&null!=a&&null!=a)return s=s.concat(e(a));s.push({key:t,value:a})})),s}(t);if(0==a.length)return null;const r=JSON.stringify(a.sort(((e,t)=>e.key.localeCompare(t.key))));return e(`${r}|key=${s}`).toUpperCase()}const s=Object.freeze({REQUEST:"request",HEART_BEAT:"heart-beat",OK:"OK",ERROR:"error"}),a=Object.freeze({POST:"POST",PUT:"PUT",GET:"GET",DELETE:"DELETE",OPTIONS:"OPTIONS",TRACE:"TRACE",PATCH:"PATCH",CONNECT:"CONNECT",HEAD:"HEAD"}),r={error:({version:e=2,errorMsg:t="",message:a,errorStatus:r=null,statusCode:o=400,type:n=s.ERROR}={})=>({status:"Failed",statusCode:o,version:e,type:n,timestamp:new Date,message:t||a,error:{status:r,message:a,errorMessage:t||a},payload:null}),success:({version:e=2,message:a="",payload:r=null,statusCode:o=200,type:n=s.REQUEST}={})=>({status:"Succeed",statusCode:o,version:e,type:n,timestamp:new Date,message:a,signature:t(r),payload:r}),ok:()=>r.success({message:"ok",type:s.OK}),heartBeat:()=>r.success({message:"Heart-Beat",type:s.HEART_BEAT})},o={async handle(e){const t=await e.json();if(400==t.statusCode)throw t.error;return t.payload}},n={createFetchOptions:({method:e,data:t}={method:a.POST,data:{}})=>({method:e,body:JSON.stringify(t),headers:{"Content-Type":"application/json"}}),put(e={}){return this.createFetchOptions({method:a.PUT,data:e})},post(e={}){return this.createFetchOptions({method:a.POST,data:e})},delete(e={}){return this.createFetchOptions({method:a.DELETE,data:e})}};export{n as Fetch,o as FetchResponse,a as HttpMethods,r as HttpResponse,s as HttpResponseType,t as createSign};
//# sourceMappingURL=index.js.map
